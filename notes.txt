Object model:
* chart
  * series[]
    * point[]
  * axis[x,y]
  * grid[x,y]
  * title
  * label[x,y]
  * legend

Attributes:
* chart:
  * ...
* axis:
  * label, number_format
  * minimum, maximum, major_interval, minor_interval
  * logarithmic, base
* series:
  marker: width, color, opacity, dash-type
  line: width, color, opacity, dash-type
* point:
  * color
  * marker
    * shape
    * filled
    * area
      * color
      * opacity
    * border -> line
      * width
      * color
      * opacity
  * line -> line
* axis:
  * label
    * font -> font
    * text
* legend:
  * area
  * border
  * position
  * font
    




== TODO ==

Object model:
* inheriting attributes so we can write
      "series.foo { marker.color: #ff0000 }"
  instead of
      "series.foo point { marker.color: #ff0000 }"
  We may also need this for the legend entry.
* CSS also has: "p { border: 5px solid red }"  

Functionality:
* Equalizing y range for function (as opposed to points):
  * what range to include?
  * specify x range for which to include the y range? i. e. "The function must be
    visible between x=0 and x=60"

Open questions:
* Specify size: of chart, of canvas
* Error bars
* Point size from data
* If there are several classes/point sizes/... in one data set, which one is
  used for the legend?  
* Trellis (adjacent charts with only one axis per direction)
* Specify positions: in chart coordinates, from left/right/top/bottom
* Alpha - include in color (RGBA) or as a separate value? 
* Grid - include in axis or separate
* Tics - inside/outside
* Set attributes for both scatter and bar series with a given class

Effects:
* Color gradients
* Cap/joint style for lines
* Pattern fill for areas

Others:
* Broken axis ('-----//-------> x)

